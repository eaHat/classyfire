
R version 3.1.1 (2014-07-10) -- "Sock it to Me"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.1.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "classyfire"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('classyfire')
Loading required package: snowfall
Loading required package: snow
Loading required package: e1071
Loading required package: boot
Loading required package: neldermead
Loading required package: optimbase
Loading required package: Matrix
Loading required package: optimsimplex

Attaching package: ‘optimsimplex’

The following object is masked from ‘package:boot’:

    simplex

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("cfBuild")
> ### * cfBuild
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cfBuild
> ### Title: Create a highly optimised ensemble of RBF SVM classifiers
> ### Aliases: cfBuild cfBuild.default
> ### Keywords: classif multivariate models nonlinear optimize
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D # Construct a classification ensemble with 100 classifiers and 100 bootstrap 
> ##D # iterations during optimisation
> ##D 
> ##D ens <- cfBuild(inputData = irisData, inputClass = irisClass, bootNum = 100, 
> ##D                ensNum = 100, parallel = TRUE, cpus = 4, type = "SOCK")
> ##D 
> ##D # List of attributes available for each classifier in the ensemble
> ##D attributes(ens)
> ##D 
> ##D # Get the overall average Test and Train accuracy
> ##D getAvgAcc(ens)$Test
> ##D getAvgAcc(ens)$Train
> ##D 
> ##D # Get all the test accuracies and the average test accuracy in the ensemble
> ##D ens$testAcc    # alternatively, getAcc(ens)$Test
> ##D ens$trainAcc   # alternatively, getAcc(ens)$rain
> ##D 
> ##D # Randomly generate test data to find out their classes using the generated ensemble
> ##D # 400 points are selected at random, which results in 100 samples (rows).
> ##D # Predict the classes of the data using the classifiers in the constructed ensemble
> ##D 
> ##D testMatr <- matrix(runif(400)*100, ncol = ncol(irisData))           
> ##D predRes  <- cfPredict(ens, testMatr)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cfPermute")
> ### * cfPermute
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cfPermute
> ### Title: Permutation testing to indicate statistical significance of
> ###   performance
> ### Aliases: cfPermute
> ### Keywords: nonparametric models
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D             
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Execute 5 permutation rounds; in each permutation test, an ensemble of 20 classifiers 
> ##D # is constructed, each running 10 bootstrap iterations during the optimization process
> ##D # The default values for permutation testing are ensNum = bootNum = permNum = 100
> ##D 
> ##D permObj <- cfPermute(irisData, irisClass, bootNum = 10, ensNum = 20, permNum = 5, parallel = TRUE, 
> ##D                      cpus = 4, type = "SOCK")
> ##D 
> ##D # List of attributes for each permutation
> ##D attributes(permObj)
> ##D 
> ##D # Get the vector of averaged accuracies, one for each permutation 
> ##D # (each permutation is an independent classification ensemble)
> ##D permObj$avgAcc
> ##D 
> ##D # Get the overall elapsed time for the permutation process 
> ##D permObj$totalTime[3]
> ##D 
> ##D # Get the vector of individual execution times for each permutation
> ##D permObj$execTime
> ##D 
> ##D # Access the first ensemble in the permutation list
> ##D permObj$permList[[1]]
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("cfPredict")
> ### * cfPredict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cfPredict
> ### Title: Predict the class of new data using an existing ensemble
> ### Aliases: cfPredict
> ### Keywords: classif multivariate models nonlinear
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D # Construct a classification ensemble with 100 classifiers and 100 bootstrap 
> ##D # iterations during optimisation
> ##D 
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Randomly generate test data to find out their classes using the generated ensemble
> ##D # 400 points are selected at random, which results in 100 samples (rows).
> ##D # Predict the classes of the data using the classifiers in the constructed ensemble
> ##D 
> ##D testMatr <- matrix(runif(400)*100, ncol=4)           
> ##D predRes  <- cfPredict(ens, testMatr)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getAcc")
> ### * getAcc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getAcc
> ### Title: Get the accuracies of a classification ensemble
> ### Aliases: getAcc
> ### Keywords: array
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D ens <- cfBuild(inputData = irisData, inputClass = irisClass, bootNum = 100, 
> ##D                ensNum = 100, parallel = TRUE, cpus = 4, type = "SOCK")
> ##D 
> ##D # Get the attributes provided by the getAcc function
> ##D attributes(getAcc(ens))
> ##D 
> ##D # Get both the vectors of test and train accuracies from the classifiers in the ensemble
> ##D getAcc(ens)
> ##D 
> ##D # Get the vector of test accuracies from the classifiers in the ensemble
> ##D getAcc(ens)$Test
> ##D 
> ##D # Get the vector of train accuracies from the classifiers in the ensemble
> ##D getAcc(ens)$Train
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getAvgAcc")
> ### * getAvgAcc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getAvgAcc
> ### Title: Get the average accuracies of a classification ensemble
> ### Aliases: getAvgAcc
> ### Keywords: array
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D ens <- cfBuild(inputData = irisData, inputClass = irisClass, bootNum = 100, 
> ##D                ensNum = 100, parallel = TRUE, cpus = 4, type = "SOCK")
> ##D 
> ##D # Get the attributes provided by the getAvgAcc function
> ##D attributes(getAvgAcc(ens))
> ##D 
> ##D # Get the average test and train accuracies within the ensemble
> ##D getAvgAcc(ens)
> ##D 
> ##D # Get the average test accuracy 
> ##D getAvgAcc(ens)$Test
> ##D 
> ##D # Get the average train accuracy
> ##D getAvgAcc(ens)$Train
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getConfMatr")
> ### * getConfMatr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getConfMatr
> ### Title: Confusion matrix summarising the performance of an ensemble
> ### Aliases: getConfMatr
> ### Keywords: array
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D             
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Get the confusion matrix summarising the performance of the ensemble
> ##D getConfMatr(ens)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getOptParam")
> ### * getOptParam
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getOptParam
> ### Title: Get the optimal SVM hyperparameters of a classification ensemble
> ### Aliases: getOptParam
> ### Keywords: array
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Get the optimal SVM hyperparameters of the classification ensemble
> ##D optParam <- getOptParam(ens)
> ##D optParam
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("getPerm5Num")
> ### * getPerm5Num
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getPerm5Num
> ### Title: Get descriptive statistics from a permutation object
> ### Aliases: getPerm5Num
> ### Keywords: math
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D permObj <- cfPermute(irisData, irisClass, bootNum = 10, ensNum = 20, permNum = 5, 
> ##D                      parallel = TRUE, cpus = 4, type = "SOCK")
> ##D 
> ##D getPerm5Num(permObj)
> ##D getPerm5Num(permObj)$median      
> ##D getPerm5Num(permObj)$minimum
> ##D getPerm5Num(permObj)$maximum
> ##D getPerm5Num(permObj)$upperQ
> ##D getPerm5Num(permObj)$lowerQ
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ggClassPred")
> ### * ggClassPred
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggClassPred
> ### Title: Barplot of the per class accuracies.
> ### Aliases: ggClassPred
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D             
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Show the percentages of correctly classified samples in 
> ##D # a barplot with or without text respectively
> ##D 
> ##D ggClassPred(ens)
> ##D ggClassPred(ens, showText = TRUE)
> ##D 
> ##D # Show the percentages of classified and missclassified samples
> ##D # in a barplot simultaneously with and without text
> ##D 
> ##D ggClassPred(ens, displayAll = TRUE)
> ##D ggClassPred(ens, position="stack", displayAll = TRUE)
> ##D ggClassPred(ens, position="stack", displayAll = TRUE, showText = TRUE)
> ##D 
> ##D # Alernatively, using a dodge position
> ##D ggClassPred(ens, position = "dodge", displayAll = TRUE)
> ##D ggClassPred(ens, position = "dodge", displayAll = TRUE, showText = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ggEnsHist")
> ### * ggEnsHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggEnsHist
> ### Title: Ensemble Histograms
> ### Aliases: ggEnsHist
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Basic histogram of the test accuracies in the ensemble
> ##D ggEnsHist(ens)
> ##D 
> ##D # Density plot of the test accuracies in the ensemble
> ##D ggEnsHist(ens, density = TRUE)
> ##D 
> ##D # Density plot that highlights additional descriptive statistics
> ##D ggEnsHist(ens, density = TRUE, percentiles=TRUE)
> ##D ggEnsHist(ens, density = TRUE, percentiles=TRUE, mean=TRUE)
> ##D ggEnsHist(ens, density = TRUE, percentiles=TRUE, median=TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ggEnsTrend")
> ### * ggEnsTrend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggEnsTrend
> ### Title: Trend of the test accuracies
> ### Aliases: ggEnsTrend
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D             
> ##D ens <- cfBuild(irisData, irisClass, bootNum = 100, ensNum = 100, parallel = TRUE, 
> ##D                cpus = 4, type = "SOCK")
> ##D 
> ##D # Plot the trend of the test accuracies in the ensemble
> ##D ggEnsTrend(ens)
> ##D 
> ##D # Plot with text 
> ##D ggEnsTrend(ens, showText  = TRUE)
> ##D 
> ##D # Plot with text; set different limits on y axis 
> ##D ggEnsTrend(ens, showText  = TRUE, ylims=c(90, 100))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ggPermHist")
> ### * ggPermHist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggPermHist
> ### Title: Permutation Histograms
> ### Aliases: ggPermHist
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(iris)
> ##D 
> ##D irisClass <- iris[,5]
> ##D irisData  <- iris[,-5]
> ##D 
> ##D permObj <- cfPermute(irisData, irisClass, bootNum = 10, ensNum = 20, permNum = 5, 
> ##D                      parallel = TRUE, cpus = 4, type = "SOCK")
> ##D 
> ##D # Basic histogram of the averaged test accuracies during permutation 
> ##D ggPermHist(permObj)
> ##D 
> ##D # Density plot 
> ##D ggPermHist(permObj, density=TRUE)
> ##D 
> ##D # Density plot that highlights additional descriptive statistics
> ##D ggPermHist(permObj, density=TRUE, percentiles = TRUE, mean = TRUE)
> ##D ggPermHist(permObj, density=TRUE, percentiles = TRUE, median = TRUE)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.695 0.062 2.774 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
